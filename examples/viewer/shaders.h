#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input .\shaders.glsl --output shaders.h --slang glsl330

    Overview:

        Shader program 'mesh':
            Get shader desc: mesh_shader_desc(sg_query_backend());
            Vertex shader: mesh_vs
                Attribute slots:
                    ATTR_mesh_vs_a_position = 0
                    ATTR_mesh_vs_a_normal = 1
                Uniform block 'mesh_vertex_ubo':
                    C struct: mesh_vertex_ubo_t
                    Bind slot: SLOT_mesh_vertex_ubo = 0
            Fragment shader: mesh_fs


    Shader descriptor structs:

        sg_shader mesh = sg_make_shader(mesh_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'mesh_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_mesh_vs_a_position] = { ... },
                    [ATTR_mesh_vs_a_normal] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'mesh_vertex_ubo':

        mesh_vertex_ubo_t mesh_vertex_ubo = {
            .geometry_to_world = ...;
            .normal_to_world = ...;
            .world_to_clip = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_mesh_vertex_ubo, &SG_RANGE(mesh_vertex_ubo));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_mesh_vs_a_position (0)
#define ATTR_mesh_vs_a_normal (1)
#define SLOT_mesh_vertex_ubo (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct mesh_vertex_ubo_t {
    hmm_mat4 geometry_to_world;
    hmm_mat4 normal_to_world;
    hmm_mat4 world_to_clip;
} mesh_vertex_ubo_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 mesh_vertex_ubo[12];
    layout(location = 0) in vec3 a_position;
    layout(location = 1) in vec3 a_normal;
    out vec3 v_normal;
    
    void main()
    {
        gl_Position = mat4(mesh_vertex_ubo[8], mesh_vertex_ubo[9], mesh_vertex_ubo[10], mesh_vertex_ubo[11]) * (mat4(mesh_vertex_ubo[0], mesh_vertex_ubo[1], mesh_vertex_ubo[2], mesh_vertex_ubo[3]) * vec4(a_position, 1.0));
        v_normal = (mat4(mesh_vertex_ubo[4], mesh_vertex_ubo[5], mesh_vertex_ubo[6], mesh_vertex_ubo[7]) * vec4(a_normal, 0.0)).xyz;
    }
    
*/
static const char mesh_vs_source_glsl330[514] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x32,0x5d,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x38,0x5d,0x2c,0x20,0x6d,0x65,0x73,
    0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x39,0x5d,0x2c,
    0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,
    0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x28,0x6d,0x61,
    0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,
    0x62,0x6f,0x5b,0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x32,0x5d,0x2c,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x33,
    0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,
    0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,
    0x6f,0x5b,0x34,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x35,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x36,0x5d,0x2c,0x20,0x6d,0x65,
    0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x37,0x5d,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 330
    
    in vec3 v_normal;
    layout(location = 0) out vec4 o_color;
    
    void main()
    {
        float _24 = (dot(normalize(v_normal), vec3(0.57735025882720947265625)) * 0.5) + 0.5;
        o_color = vec4(_24, _24, _24, 1.0);
    }
    
*/
static const char mesh_fs_source_glsl330[219] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x34,0x20,0x3d,0x20,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x37,0x37,0x33,0x35,0x30,0x32,0x35,0x38,
    0x38,0x32,0x37,0x32,0x30,0x39,0x34,0x37,0x32,0x36,0x35,0x36,0x32,0x35,0x29,0x29,
    0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x5f,0x32,0x34,0x2c,0x20,0x5f,0x32,0x34,0x2c,0x20,0x5f,0x32,0x34,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.h"
#endif
static inline const sg_shader_desc* mesh_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "a_position";
      desc.attrs[1].name = "a_normal";
      desc.vs.source = mesh_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].uniforms[0].name = "mesh_vertex_ubo";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = mesh_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "mesh_shader";
    }
    return &desc;
  }
  return 0;
}
